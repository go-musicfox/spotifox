// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.6
// source: metadata.proto

package Spotify

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Album_Type int32

const (
	Album_ALBUM       Album_Type = 1
	Album_SINGLE      Album_Type = 2
	Album_COMPILATION Album_Type = 3
	Album_EP          Album_Type = 4
)

// Enum value maps for Album_Type.
var (
	Album_Type_name = map[int32]string{
		1: "ALBUM",
		2: "SINGLE",
		3: "COMPILATION",
		4: "EP",
	}
	Album_Type_value = map[string]int32{
		"ALBUM":       1,
		"SINGLE":      2,
		"COMPILATION": 3,
		"EP":          4,
	}
)

func (x Album_Type) Enum() *Album_Type {
	p := new(Album_Type)
	*p = x
	return p
}

func (x Album_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Album_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[0].Descriptor()
}

func (Album_Type) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[0]
}

func (x Album_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Album_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Album_Type(num)
	return nil
}

// Deprecated: Use Album_Type.Descriptor instead.
func (Album_Type) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{5, 0}
}

type Image_Size int32

const (
	Image_DEFAULT Image_Size = 0
	Image_SMALL   Image_Size = 1
	Image_LARGE   Image_Size = 2
	Image_XLARGE  Image_Size = 3
)

// Enum value maps for Image_Size.
var (
	Image_Size_name = map[int32]string{
		0: "DEFAULT",
		1: "SMALL",
		2: "LARGE",
		3: "XLARGE",
	}
	Image_Size_value = map[string]int32{
		"DEFAULT": 0,
		"SMALL":   1,
		"LARGE":   2,
		"XLARGE":  3,
	}
)

func (x Image_Size) Enum() *Image_Size {
	p := new(Image_Size)
	*p = x
	return p
}

func (x Image_Size) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_Size) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[1].Descriptor()
}

func (Image_Size) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[1]
}

func (x Image_Size) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Image_Size) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Image_Size(num)
	return nil
}

// Deprecated: Use Image_Size.Descriptor instead.
func (Image_Size) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{7, 0}
}

type Copyright_Type int32

const (
	Copyright_P Copyright_Type = 0
	Copyright_C Copyright_Type = 1
)

// Enum value maps for Copyright_Type.
var (
	Copyright_Type_name = map[int32]string{
		0: "P",
		1: "C",
	}
	Copyright_Type_value = map[string]int32{
		"P": 0,
		"C": 1,
	}
)

func (x Copyright_Type) Enum() *Copyright_Type {
	p := new(Copyright_Type)
	*p = x
	return p
}

func (x Copyright_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Copyright_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[2].Descriptor()
}

func (Copyright_Type) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[2]
}

func (x Copyright_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Copyright_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Copyright_Type(num)
	return nil
}

// Deprecated: Use Copyright_Type.Descriptor instead.
func (Copyright_Type) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{11, 0}
}

type Restriction_Type int32

const (
	Restriction_STREAMING Restriction_Type = 0
)

// Enum value maps for Restriction_Type.
var (
	Restriction_Type_name = map[int32]string{
		0: "STREAMING",
	}
	Restriction_Type_value = map[string]int32{
		"STREAMING": 0,
	}
)

func (x Restriction_Type) Enum() *Restriction_Type {
	p := new(Restriction_Type)
	*p = x
	return p
}

func (x Restriction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Restriction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[3].Descriptor()
}

func (Restriction_Type) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[3]
}

func (x Restriction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Restriction_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Restriction_Type(num)
	return nil
}

// Deprecated: Use Restriction_Type.Descriptor instead.
func (Restriction_Type) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{12, 0}
}

type AudioFile_Format int32

const (
	AudioFile_OGG_VORBIS_96  AudioFile_Format = 0
	AudioFile_OGG_VORBIS_160 AudioFile_Format = 1
	AudioFile_OGG_VORBIS_320 AudioFile_Format = 2
	AudioFile_MP3_256        AudioFile_Format = 3
	AudioFile_MP3_320        AudioFile_Format = 4
	AudioFile_MP3_160        AudioFile_Format = 5
	AudioFile_MP3_96         AudioFile_Format = 6
	AudioFile_MP3_160_ENC    AudioFile_Format = 7
	AudioFile_AAC_24         AudioFile_Format = 8
	AudioFile_AAC_48         AudioFile_Format = 9
	AudioFile_OTHER_10       AudioFile_Format = 10
	AudioFile_OTHER_11       AudioFile_Format = 11
	AudioFile_OTHER_12       AudioFile_Format = 12
	AudioFile_OTHER_13       AudioFile_Format = 13
	AudioFile_AAC_24_NORM    AudioFile_Format = 16
)

// Enum value maps for AudioFile_Format.
var (
	AudioFile_Format_name = map[int32]string{
		0:  "OGG_VORBIS_96",
		1:  "OGG_VORBIS_160",
		2:  "OGG_VORBIS_320",
		3:  "MP3_256",
		4:  "MP3_320",
		5:  "MP3_160",
		6:  "MP3_96",
		7:  "MP3_160_ENC",
		8:  "AAC_24",
		9:  "AAC_48",
		10: "OTHER_10",
		11: "OTHER_11",
		12: "OTHER_12",
		13: "OTHER_13",
		16: "AAC_24_NORM",
	}
	AudioFile_Format_value = map[string]int32{
		"OGG_VORBIS_96":  0,
		"OGG_VORBIS_160": 1,
		"OGG_VORBIS_320": 2,
		"MP3_256":        3,
		"MP3_320":        4,
		"MP3_160":        5,
		"MP3_96":         6,
		"MP3_160_ENC":    7,
		"AAC_24":         8,
		"AAC_48":         9,
		"OTHER_10":       10,
		"OTHER_11":       11,
		"OTHER_12":       12,
		"OTHER_13":       13,
		"AAC_24_NORM":    16,
	}
)

func (x AudioFile_Format) Enum() *AudioFile_Format {
	p := new(AudioFile_Format)
	*p = x
	return p
}

func (x AudioFile_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioFile_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[4].Descriptor()
}

func (AudioFile_Format) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[4]
}

func (x AudioFile_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AudioFile_Format) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AudioFile_Format(num)
	return nil
}

// Deprecated: Use AudioFile_Format.Descriptor instead.
func (AudioFile_Format) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{15, 0}
}

type TopTracks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country *string  `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Track   []*Track `protobuf:"bytes,2,rep,name=track" json:"track,omitempty"`
}

func (x *TopTracks) Reset() {
	*x = TopTracks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopTracks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopTracks) ProtoMessage() {}

func (x *TopTracks) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopTracks.ProtoReflect.Descriptor instead.
func (*TopTracks) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *TopTracks) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *TopTracks) GetTrack() []*Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type ActivityPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartYear *int32 `protobuf:"zigzag32,1,opt,name=start_year,json=startYear" json:"start_year,omitempty"`
	EndYear   *int32 `protobuf:"zigzag32,2,opt,name=end_year,json=endYear" json:"end_year,omitempty"`
	Decade    *int32 `protobuf:"zigzag32,3,opt,name=decade" json:"decade,omitempty"`
}

func (x *ActivityPeriod) Reset() {
	*x = ActivityPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityPeriod) ProtoMessage() {}

func (x *ActivityPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityPeriod.ProtoReflect.Descriptor instead.
func (*ActivityPeriod) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityPeriod) GetStartYear() int32 {
	if x != nil && x.StartYear != nil {
		return *x.StartYear
	}
	return 0
}

func (x *ActivityPeriod) GetEndYear() int32 {
	if x != nil && x.EndYear != nil {
		return *x.EndYear
	}
	return 0
}

func (x *ActivityPeriod) GetDecade() int32 {
	if x != nil && x.Decade != nil {
		return *x.Decade
	}
	return 0
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid                  []byte            `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Name                 *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Popularity           *float32          `protobuf:"fixed32,3,opt,name=popularity" json:"popularity,omitempty"`
	TopTrack             []*TopTracks      `protobuf:"bytes,4,rep,name=top_track,json=topTrack" json:"top_track,omitempty"`
	AlbumGroup           []*AlbumGroup     `protobuf:"bytes,5,rep,name=album_group,json=albumGroup" json:"album_group,omitempty"`
	SingleGroup          []*AlbumGroup     `protobuf:"bytes,6,rep,name=single_group,json=singleGroup" json:"single_group,omitempty"`
	CompilationGroup     []*AlbumGroup     `protobuf:"bytes,7,rep,name=compilation_group,json=compilationGroup" json:"compilation_group,omitempty"`
	AppearsOnGroup       []*AlbumGroup     `protobuf:"bytes,8,rep,name=appears_on_group,json=appearsOnGroup" json:"appears_on_group,omitempty"`
	Genre                []string          `protobuf:"bytes,9,rep,name=genre" json:"genre,omitempty"`
	ExternalId           []*ExternalId     `protobuf:"bytes,10,rep,name=external_id,json=externalId" json:"external_id,omitempty"`
	Portrait             []*Image          `protobuf:"bytes,11,rep,name=portrait" json:"portrait,omitempty"`
	Biography            []*Biography      `protobuf:"bytes,12,rep,name=biography" json:"biography,omitempty"`
	ActivityPeriod       []*ActivityPeriod `protobuf:"bytes,13,rep,name=activity_period,json=activityPeriod" json:"activity_period,omitempty"`
	Restriction          []*Restriction    `protobuf:"bytes,14,rep,name=restriction" json:"restriction,omitempty"`
	Related              []*Artist         `protobuf:"bytes,15,rep,name=related" json:"related,omitempty"`
	IsPortraitAlbumCover *bool             `protobuf:"varint,16,opt,name=is_portrait_album_cover,json=isPortraitAlbumCover" json:"is_portrait_album_cover,omitempty"`
	PortraitGroup        *ImageGroup       `protobuf:"bytes,17,opt,name=portrait_group,json=portraitGroup" json:"portrait_group,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *Artist) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *Artist) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Artist) GetPopularity() float32 {
	if x != nil && x.Popularity != nil {
		return *x.Popularity
	}
	return 0
}

func (x *Artist) GetTopTrack() []*TopTracks {
	if x != nil {
		return x.TopTrack
	}
	return nil
}

func (x *Artist) GetAlbumGroup() []*AlbumGroup {
	if x != nil {
		return x.AlbumGroup
	}
	return nil
}

func (x *Artist) GetSingleGroup() []*AlbumGroup {
	if x != nil {
		return x.SingleGroup
	}
	return nil
}

func (x *Artist) GetCompilationGroup() []*AlbumGroup {
	if x != nil {
		return x.CompilationGroup
	}
	return nil
}

func (x *Artist) GetAppearsOnGroup() []*AlbumGroup {
	if x != nil {
		return x.AppearsOnGroup
	}
	return nil
}

func (x *Artist) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *Artist) GetExternalId() []*ExternalId {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

func (x *Artist) GetPortrait() []*Image {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *Artist) GetBiography() []*Biography {
	if x != nil {
		return x.Biography
	}
	return nil
}

func (x *Artist) GetActivityPeriod() []*ActivityPeriod {
	if x != nil {
		return x.ActivityPeriod
	}
	return nil
}

func (x *Artist) GetRestriction() []*Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *Artist) GetRelated() []*Artist {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Artist) GetIsPortraitAlbumCover() bool {
	if x != nil && x.IsPortraitAlbumCover != nil {
		return *x.IsPortraitAlbumCover
	}
	return false
}

func (x *Artist) GetPortraitGroup() *ImageGroup {
	if x != nil {
		return x.PortraitGroup
	}
	return nil
}

type AlbumGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Album []*Album `protobuf:"bytes,1,rep,name=album" json:"album,omitempty"`
}

func (x *AlbumGroup) Reset() {
	*x = AlbumGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumGroup) ProtoMessage() {}

func (x *AlbumGroup) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumGroup.ProtoReflect.Descriptor instead.
func (*AlbumGroup) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *AlbumGroup) GetAlbum() []*Album {
	if x != nil {
		return x.Album
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  *int32 `protobuf:"zigzag32,1,opt,name=year" json:"year,omitempty"`
	Month *int32 `protobuf:"zigzag32,2,opt,name=month" json:"month,omitempty"`
	Day   *int32 `protobuf:"zigzag32,3,opt,name=day" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *Date) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid         []byte         `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Name        *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Artist      []*Artist      `protobuf:"bytes,3,rep,name=artist" json:"artist,omitempty"`
	Typ         *Album_Type    `protobuf:"varint,4,opt,name=typ,enum=Spotify.Album_Type" json:"typ,omitempty"`
	Label       *string        `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	Date        *Date          `protobuf:"bytes,6,opt,name=date" json:"date,omitempty"`
	Popularity  *float32       `protobuf:"fixed32,7,opt,name=popularity" json:"popularity,omitempty"`
	Genre       []string       `protobuf:"bytes,8,rep,name=genre" json:"genre,omitempty"`
	Cover       []*Image       `protobuf:"bytes,9,rep,name=cover" json:"cover,omitempty"`
	ExternalId  []*ExternalId  `protobuf:"bytes,10,rep,name=external_id,json=externalId" json:"external_id,omitempty"`
	Disc        []*Disc        `protobuf:"bytes,11,rep,name=disc" json:"disc,omitempty"`
	Review      []string       `protobuf:"bytes,12,rep,name=review" json:"review,omitempty"`
	Copyright   []*Copyright   `protobuf:"bytes,13,rep,name=copyright" json:"copyright,omitempty"`
	Restriction []*Restriction `protobuf:"bytes,14,rep,name=restriction" json:"restriction,omitempty"`
	Related     []*Album       `protobuf:"bytes,15,rep,name=related" json:"related,omitempty"`
	SalePeriod  []*SalePeriod  `protobuf:"bytes,16,rep,name=sale_period,json=salePeriod" json:"sale_period,omitempty"`
	CoverGroup  *ImageGroup    `protobuf:"bytes,17,opt,name=cover_group,json=coverGroup" json:"cover_group,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *Album) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *Album) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Album) GetArtist() []*Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *Album) GetTyp() Album_Type {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return Album_ALBUM
}

func (x *Album) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Album) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Album) GetPopularity() float32 {
	if x != nil && x.Popularity != nil {
		return *x.Popularity
	}
	return 0
}

func (x *Album) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *Album) GetCover() []*Image {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Album) GetExternalId() []*ExternalId {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

func (x *Album) GetDisc() []*Disc {
	if x != nil {
		return x.Disc
	}
	return nil
}

func (x *Album) GetReview() []string {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Album) GetCopyright() []*Copyright {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *Album) GetRestriction() []*Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *Album) GetRelated() []*Album {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Album) GetSalePeriod() []*SalePeriod {
	if x != nil {
		return x.SalePeriod
	}
	return nil
}

func (x *Album) GetCoverGroup() *ImageGroup {
	if x != nil {
		return x.CoverGroup
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid         []byte         `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Name        *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Album       *Album         `protobuf:"bytes,3,opt,name=album" json:"album,omitempty"`
	Artist      []*Artist      `protobuf:"bytes,4,rep,name=artist" json:"artist,omitempty"`
	Number      *int32         `protobuf:"zigzag32,5,opt,name=number" json:"number,omitempty"`
	DiscNumber  *int32         `protobuf:"zigzag32,6,opt,name=disc_number,json=discNumber" json:"disc_number,omitempty"`
	Duration    *int32         `protobuf:"zigzag32,7,opt,name=duration" json:"duration,omitempty"`
	Popularity  *float32       `protobuf:"fixed32,8,opt,name=popularity" json:"popularity,omitempty"`
	Explicit    *bool          `protobuf:"varint,9,opt,name=explicit" json:"explicit,omitempty"`
	ExternalId  []*ExternalId  `protobuf:"bytes,10,rep,name=external_id,json=externalId" json:"external_id,omitempty"`
	Restriction []*Restriction `protobuf:"bytes,11,rep,name=restriction" json:"restriction,omitempty"`
	File        []*AudioFile   `protobuf:"bytes,12,rep,name=file" json:"file,omitempty"`
	Alternative []*Track       `protobuf:"bytes,13,rep,name=alternative" json:"alternative,omitempty"`
	SalePeriod  []*SalePeriod  `protobuf:"bytes,14,rep,name=sale_period,json=salePeriod" json:"sale_period,omitempty"`
	Preview     []*AudioFile   `protobuf:"bytes,15,rep,name=preview" json:"preview,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *Track) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *Track) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Track) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *Track) GetArtist() []*Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *Track) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *Track) GetDiscNumber() int32 {
	if x != nil && x.DiscNumber != nil {
		return *x.DiscNumber
	}
	return 0
}

func (x *Track) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Track) GetPopularity() float32 {
	if x != nil && x.Popularity != nil {
		return *x.Popularity
	}
	return 0
}

func (x *Track) GetExplicit() bool {
	if x != nil && x.Explicit != nil {
		return *x.Explicit
	}
	return false
}

func (x *Track) GetExternalId() []*ExternalId {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

func (x *Track) GetRestriction() []*Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *Track) GetFile() []*AudioFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Track) GetAlternative() []*Track {
	if x != nil {
		return x.Alternative
	}
	return nil
}

func (x *Track) GetSalePeriod() []*SalePeriod {
	if x != nil {
		return x.SalePeriod
	}
	return nil
}

func (x *Track) GetPreview() []*AudioFile {
	if x != nil {
		return x.Preview
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId []byte      `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Size   *Image_Size `protobuf:"varint,2,opt,name=size,enum=Spotify.Image_Size" json:"size,omitempty"`
	Width  *int32      `protobuf:"zigzag32,3,opt,name=width" json:"width,omitempty"`
	Height *int32      `protobuf:"zigzag32,4,opt,name=height" json:"height,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *Image) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *Image) GetSize() Image_Size {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return Image_DEFAULT
}

func (x *Image) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Image) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type ImageGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []*Image `protobuf:"bytes,1,rep,name=image" json:"image,omitempty"`
}

func (x *ImageGroup) Reset() {
	*x = ImageGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageGroup) ProtoMessage() {}

func (x *ImageGroup) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageGroup.ProtoReflect.Descriptor instead.
func (*ImageGroup) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{8}
}

func (x *ImageGroup) GetImage() []*Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Biography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text          *string       `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Portrait      []*Image      `protobuf:"bytes,2,rep,name=portrait" json:"portrait,omitempty"`
	PortraitGroup []*ImageGroup `protobuf:"bytes,3,rep,name=portrait_group,json=portraitGroup" json:"portrait_group,omitempty"`
}

func (x *Biography) Reset() {
	*x = Biography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biography) ProtoMessage() {}

func (x *Biography) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biography.ProtoReflect.Descriptor instead.
func (*Biography) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{9}
}

func (x *Biography) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Biography) GetPortrait() []*Image {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *Biography) GetPortraitGroup() []*ImageGroup {
	if x != nil {
		return x.PortraitGroup
	}
	return nil
}

type Disc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *int32   `protobuf:"zigzag32,1,opt,name=number" json:"number,omitempty"`
	Name   *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Track  []*Track `protobuf:"bytes,3,rep,name=track" json:"track,omitempty"`
}

func (x *Disc) Reset() {
	*x = Disc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disc) ProtoMessage() {}

func (x *Disc) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disc.ProtoReflect.Descriptor instead.
func (*Disc) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{10}
}

func (x *Disc) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *Disc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Disc) GetTrack() []*Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type Copyright struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ  *Copyright_Type `protobuf:"varint,1,opt,name=typ,enum=Spotify.Copyright_Type" json:"typ,omitempty"`
	Text *string         `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (x *Copyright) Reset() {
	*x = Copyright{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Copyright) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Copyright) ProtoMessage() {}

func (x *Copyright) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Copyright.ProtoReflect.Descriptor instead.
func (*Copyright) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{11}
}

func (x *Copyright) GetTyp() Copyright_Type {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return Copyright_P
}

func (x *Copyright) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type Restriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountriesAllowed   *string           `protobuf:"bytes,2,opt,name=countries_allowed,json=countriesAllowed" json:"countries_allowed,omitempty"`
	CountriesForbidden *string           `protobuf:"bytes,3,opt,name=countries_forbidden,json=countriesForbidden" json:"countries_forbidden,omitempty"`
	Typ                *Restriction_Type `protobuf:"varint,4,opt,name=typ,enum=Spotify.Restriction_Type" json:"typ,omitempty"`
	CatalogueStr       []string          `protobuf:"bytes,5,rep,name=catalogue_str,json=catalogueStr" json:"catalogue_str,omitempty"`
}

func (x *Restriction) Reset() {
	*x = Restriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Restriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restriction) ProtoMessage() {}

func (x *Restriction) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restriction.ProtoReflect.Descriptor instead.
func (*Restriction) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{12}
}

func (x *Restriction) GetCountriesAllowed() string {
	if x != nil && x.CountriesAllowed != nil {
		return *x.CountriesAllowed
	}
	return ""
}

func (x *Restriction) GetCountriesForbidden() string {
	if x != nil && x.CountriesForbidden != nil {
		return *x.CountriesForbidden
	}
	return ""
}

func (x *Restriction) GetTyp() Restriction_Type {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return Restriction_STREAMING
}

func (x *Restriction) GetCatalogueStr() []string {
	if x != nil {
		return x.CatalogueStr
	}
	return nil
}

type SalePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restriction []*Restriction `protobuf:"bytes,1,rep,name=restriction" json:"restriction,omitempty"`
	Start       *Date          `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End         *Date          `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
}

func (x *SalePeriod) Reset() {
	*x = SalePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalePeriod) ProtoMessage() {}

func (x *SalePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalePeriod.ProtoReflect.Descriptor instead.
func (*SalePeriod) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{13}
}

func (x *SalePeriod) GetRestriction() []*Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *SalePeriod) GetStart() *Date {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SalePeriod) GetEnd() *Date {
	if x != nil {
		return x.End
	}
	return nil
}

type ExternalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ *string `protobuf:"bytes,1,opt,name=typ" json:"typ,omitempty"`
	Id  *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (x *ExternalId) Reset() {
	*x = ExternalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalId) ProtoMessage() {}

func (x *ExternalId) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalId.ProtoReflect.Descriptor instead.
func (*ExternalId) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{14}
}

func (x *ExternalId) GetTyp() string {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return ""
}

func (x *ExternalId) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type AudioFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId []byte            `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Format *AudioFile_Format `protobuf:"varint,2,opt,name=format,enum=Spotify.AudioFile_Format" json:"format,omitempty"`
}

func (x *AudioFile) Reset() {
	*x = AudioFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFile) ProtoMessage() {}

func (x *AudioFile) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFile.ProtoReflect.Descriptor instead.
func (*AudioFile) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{15}
}

func (x *AudioFile) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *AudioFile) GetFormat() AudioFile_Format {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return AudioFile_OGG_VORBIS_96
}

var File_metadata_proto protoreflect.FileDescriptor

var file_metadata_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x4b, 0x0a, 0x09, 0x54, 0x6f, 0x70,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x62, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x06, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65, 0x22, 0xb0, 0x06, 0x0a, 0x06, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x74,
	0x6f, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0b,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x73, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x32, 0x0a,
	0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0xbb, 0x05, 0x0a, 0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x52, 0x04, 0x64,
	0x69, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x09, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x36, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4d, 0x50, 0x49, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x45,
	0x50, 0x10, 0x04, 0x22, 0xb9, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22,
	0xae, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x35, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03,
	0x22, 0x32, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x58,
	0x0a, 0x04, 0x44, 0x69, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x60, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x14, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01,
	0x50, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x72, 0x22, 0x15, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x2e,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab,
	0x02, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x47, 0x47, 0x5f, 0x56, 0x4f, 0x52, 0x42, 0x49,
	0x53, 0x5f, 0x39, 0x36, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x47, 0x47, 0x5f, 0x56, 0x4f,
	0x52, 0x42, 0x49, 0x53, 0x5f, 0x31, 0x36, 0x30, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x47,
	0x47, 0x5f, 0x56, 0x4f, 0x52, 0x42, 0x49, 0x53, 0x5f, 0x33, 0x32, 0x30, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x50, 0x33, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x50, 0x33, 0x5f, 0x33, 0x32, 0x30, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x50, 0x33, 0x5f,
	0x31, 0x36, 0x30, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x50, 0x33, 0x5f, 0x39, 0x36, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x50, 0x33, 0x5f, 0x31, 0x36, 0x30, 0x5f, 0x45, 0x4e, 0x43,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x32, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x33, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x41,
	0x43, 0x5f, 0x31, 0x36, 0x30, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x41, 0x43, 0x5f, 0x33,
	0x32, 0x30, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x34, 0x10, 0x0c,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x35, 0x10, 0x0d, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x74, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x74, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66,
	0x79,
}

var (
	file_metadata_proto_rawDescOnce sync.Once
	file_metadata_proto_rawDescData = file_metadata_proto_rawDesc
)

func file_metadata_proto_rawDescGZIP() []byte {
	file_metadata_proto_rawDescOnce.Do(func() {
		file_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_proto_rawDescData)
	})
	return file_metadata_proto_rawDescData
}

var file_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_metadata_proto_goTypes = []interface{}{
	(Album_Type)(0),        // 0: Spotify.Album.Type
	(Image_Size)(0),        // 1: Spotify.Image.Size
	(Copyright_Type)(0),    // 2: Spotify.Copyright.Type
	(Restriction_Type)(0),  // 3: Spotify.Restriction.Type
	(AudioFile_Format)(0),  // 4: Spotify.AudioFile.Format
	(*TopTracks)(nil),      // 5: Spotify.TopTracks
	(*ActivityPeriod)(nil), // 6: Spotify.ActivityPeriod
	(*Artist)(nil),         // 7: Spotify.Artist
	(*AlbumGroup)(nil),     // 8: Spotify.AlbumGroup
	(*Date)(nil),           // 9: Spotify.Date
	(*Album)(nil),          // 10: Spotify.Album
	(*Track)(nil),          // 11: Spotify.Track
	(*Image)(nil),          // 12: Spotify.Image
	(*ImageGroup)(nil),     // 13: Spotify.ImageGroup
	(*Biography)(nil),      // 14: Spotify.Biography
	(*Disc)(nil),           // 15: Spotify.Disc
	(*Copyright)(nil),      // 16: Spotify.Copyright
	(*Restriction)(nil),    // 17: Spotify.Restriction
	(*SalePeriod)(nil),     // 18: Spotify.SalePeriod
	(*ExternalId)(nil),     // 19: Spotify.ExternalId
	(*AudioFile)(nil),      // 20: Spotify.AudioFile
}
var file_metadata_proto_depIdxs = []int32{
	11, // 0: Spotify.TopTracks.track:type_name -> Spotify.Track
	5,  // 1: Spotify.Artist.top_track:type_name -> Spotify.TopTracks
	8,  // 2: Spotify.Artist.album_group:type_name -> Spotify.AlbumGroup
	8,  // 3: Spotify.Artist.single_group:type_name -> Spotify.AlbumGroup
	8,  // 4: Spotify.Artist.compilation_group:type_name -> Spotify.AlbumGroup
	8,  // 5: Spotify.Artist.appears_on_group:type_name -> Spotify.AlbumGroup
	19, // 6: Spotify.Artist.external_id:type_name -> Spotify.ExternalId
	12, // 7: Spotify.Artist.portrait:type_name -> Spotify.Image
	14, // 8: Spotify.Artist.biography:type_name -> Spotify.Biography
	6,  // 9: Spotify.Artist.activity_period:type_name -> Spotify.ActivityPeriod
	17, // 10: Spotify.Artist.restriction:type_name -> Spotify.Restriction
	7,  // 11: Spotify.Artist.related:type_name -> Spotify.Artist
	13, // 12: Spotify.Artist.portrait_group:type_name -> Spotify.ImageGroup
	10, // 13: Spotify.AlbumGroup.album:type_name -> Spotify.Album
	7,  // 14: Spotify.Album.artist:type_name -> Spotify.Artist
	0,  // 15: Spotify.Album.typ:type_name -> Spotify.Album.Type
	9,  // 16: Spotify.Album.date:type_name -> Spotify.Date
	12, // 17: Spotify.Album.cover:type_name -> Spotify.Image
	19, // 18: Spotify.Album.external_id:type_name -> Spotify.ExternalId
	15, // 19: Spotify.Album.disc:type_name -> Spotify.Disc
	16, // 20: Spotify.Album.copyright:type_name -> Spotify.Copyright
	17, // 21: Spotify.Album.restriction:type_name -> Spotify.Restriction
	10, // 22: Spotify.Album.related:type_name -> Spotify.Album
	18, // 23: Spotify.Album.sale_period:type_name -> Spotify.SalePeriod
	13, // 24: Spotify.Album.cover_group:type_name -> Spotify.ImageGroup
	10, // 25: Spotify.Track.album:type_name -> Spotify.Album
	7,  // 26: Spotify.Track.artist:type_name -> Spotify.Artist
	19, // 27: Spotify.Track.external_id:type_name -> Spotify.ExternalId
	17, // 28: Spotify.Track.restriction:type_name -> Spotify.Restriction
	20, // 29: Spotify.Track.file:type_name -> Spotify.AudioFile
	11, // 30: Spotify.Track.alternative:type_name -> Spotify.Track
	18, // 31: Spotify.Track.sale_period:type_name -> Spotify.SalePeriod
	20, // 32: Spotify.Track.preview:type_name -> Spotify.AudioFile
	1,  // 33: Spotify.Image.size:type_name -> Spotify.Image.Size
	12, // 34: Spotify.ImageGroup.image:type_name -> Spotify.Image
	12, // 35: Spotify.Biography.portrait:type_name -> Spotify.Image
	13, // 36: Spotify.Biography.portrait_group:type_name -> Spotify.ImageGroup
	11, // 37: Spotify.Disc.track:type_name -> Spotify.Track
	2,  // 38: Spotify.Copyright.typ:type_name -> Spotify.Copyright.Type
	3,  // 39: Spotify.Restriction.typ:type_name -> Spotify.Restriction.Type
	17, // 40: Spotify.SalePeriod.restriction:type_name -> Spotify.Restriction
	9,  // 41: Spotify.SalePeriod.start:type_name -> Spotify.Date
	9,  // 42: Spotify.SalePeriod.end:type_name -> Spotify.Date
	4,  // 43: Spotify.AudioFile.format:type_name -> Spotify.AudioFile.Format
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_metadata_proto_init() }
func file_metadata_proto_init() {
	if File_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopTracks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Copyright); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Restriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metadata_proto_goTypes,
		DependencyIndexes: file_metadata_proto_depIdxs,
		EnumInfos:         file_metadata_proto_enumTypes,
		MessageInfos:      file_metadata_proto_msgTypes,
	}.Build()
	File_metadata_proto = out.File
	file_metadata_proto_rawDesc = nil
	file_metadata_proto_goTypes = nil
	file_metadata_proto_depIdxs = nil
}
