// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

package Spotify

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SearchRequest_Type int32

const (
	SearchRequest_TRACK    SearchRequest_Type = 0
	SearchRequest_ALBUM    SearchRequest_Type = 1
	SearchRequest_ARTIST   SearchRequest_Type = 2
	SearchRequest_PLAYLIST SearchRequest_Type = 3
	SearchRequest_USER     SearchRequest_Type = 4
)

var SearchRequest_Type_name = map[int32]string{
	0: "TRACK",
	1: "ALBUM",
	2: "ARTIST",
	3: "PLAYLIST",
	4: "USER",
}
var SearchRequest_Type_value = map[string]int32{
	"TRACK":    0,
	"ALBUM":    1,
	"ARTIST":   2,
	"PLAYLIST": 3,
	"USER":     4,
}

func (x SearchRequest_Type) Enum() *SearchRequest_Type {
	p := new(SearchRequest_Type)
	*p = x
	return p
}
func (x SearchRequest_Type) String() string {
	return proto.EnumName(SearchRequest_Type_name, int32(x))
}
func (x *SearchRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SearchRequest_Type_value, data, "SearchRequest_Type")
	if err != nil {
		return err
	}
	*x = SearchRequest_Type(value)
	return nil
}
func (SearchRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0, 0} }

type SearchRequest struct {
	Query            *string             `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Type             *SearchRequest_Type `protobuf:"varint,2,opt,name=type,enum=Spotify.SearchRequest_Type" json:"type,omitempty"`
	Limit            *int32              `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset           *int32              `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	DidYouMean       *bool               `protobuf:"varint,5,opt,name=did_you_mean,json=didYouMean" json:"did_you_mean,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *SearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *SearchRequest) GetType() SearchRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SearchRequest_TRACK
}

func (m *SearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *SearchRequest) GetDidYouMean() bool {
	if m != nil && m.DidYouMean != nil {
		return *m.DidYouMean
	}
	return false
}

type Playlist struct {
	Uri              *string  `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image            []*Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Playlist) Reset()                    { *m = Playlist{} }
func (m *Playlist) String() string            { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()               {}
func (*Playlist) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *Playlist) GetUri() string {
	if m != nil && m.Uri != nil {
		return *m.Uri
	}
	return ""
}

func (m *Playlist) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Playlist) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type User struct {
	Username         *string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	FullName         *string  `protobuf:"bytes,2,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Image            []*Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	Followers        *int32   `protobuf:"zigzag32,4,opt,name=followers" json:"followers,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *User) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *User) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *User) GetFollowers() int32 {
	if m != nil && m.Followers != nil {
		return *m.Followers
	}
	return 0
}

type SearchReply struct {
	Hits             *int32      `protobuf:"zigzag32,1,opt,name=hits" json:"hits,omitempty"`
	Track            []*Track    `protobuf:"bytes,2,rep,name=track" json:"track,omitempty"`
	Album            []*Album    `protobuf:"bytes,3,rep,name=album" json:"album,omitempty"`
	Artist           []*Artist   `protobuf:"bytes,4,rep,name=artist" json:"artist,omitempty"`
	Playlist         []*Playlist `protobuf:"bytes,5,rep,name=playlist" json:"playlist,omitempty"`
	DidYouMean       *string     `protobuf:"bytes,6,opt,name=did_you_mean,json=didYouMean" json:"did_you_mean,omitempty"`
	User             []*User     `protobuf:"bytes,7,rep,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *SearchReply) GetHits() int32 {
	if m != nil && m.Hits != nil {
		return *m.Hits
	}
	return 0
}

func (m *SearchReply) GetTrack() []*Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *SearchReply) GetAlbum() []*Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *SearchReply) GetArtist() []*Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *SearchReply) GetPlaylist() []*Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

func (m *SearchReply) GetDidYouMean() string {
	if m != nil && m.DidYouMean != nil {
		return *m.DidYouMean
	}
	return ""
}

func (m *SearchReply) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "Spotify.SearchRequest")
	proto.RegisterType((*Playlist)(nil), "Spotify.Playlist")
	proto.RegisterType((*User)(nil), "Spotify.User")
	proto.RegisterType((*SearchReply)(nil), "Spotify.SearchReply")
	proto.RegisterEnum("Spotify.SearchRequest_Type", SearchRequest_Type_name, SearchRequest_Type_value)
}

func init() { proto.RegisterFile("search.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6f, 0x94, 0x40,
	0x14, 0x97, 0x05, 0xb6, 0xf0, 0xda, 0xae, 0xec, 0x8b, 0x31, 0xa4, 0xf5, 0x80, 0xc4, 0x44, 0x2e,
	0xae, 0x49, 0x3f, 0x81, 0x68, 0x3c, 0x34, 0x6e, 0x4d, 0x33, 0xcb, 0x9a, 0xf4, 0xb4, 0x19, 0xcb,
	0x60, 0x27, 0x0e, 0x0b, 0x9d, 0x19, 0x62, 0x38, 0x7b, 0xf3, 0x93, 0xfa, 0x31, 0xcc, 0x0c, 0x94,
	0x56, 0x7b, 0xf1, 0xf6, 0x7e, 0x7f, 0xf8, 0x3d, 0xde, 0x7b, 0x03, 0x47, 0x8a, 0x51, 0x79, 0x7d,
	0xb3, 0x6a, 0x65, 0xa3, 0x1b, 0x3c, 0xd8, 0xb4, 0x8d, 0xe6, 0x55, 0x7f, 0xb2, 0xa8, 0x99, 0xa6,
	0x25, 0xd5, 0x74, 0x10, 0xd2, 0xdf, 0x0e, 0x1c, 0x6f, 0xac, 0x93, 0xb0, 0xdb, 0x8e, 0x29, 0x8d,
	0xcf, 0xc0, 0xbf, 0xed, 0x98, 0xec, 0x63, 0x27, 0x71, 0xb2, 0x90, 0x0c, 0x00, 0xdf, 0x82, 0xa7,
	0xfb, 0x96, 0xc5, 0xb3, 0xc4, 0xc9, 0x16, 0x67, 0xa7, 0xab, 0x31, 0x6f, 0xf5, 0xd7, 0xb7, 0xab,
	0xa2, 0x6f, 0x19, 0xb1, 0x46, 0x13, 0x23, 0x78, 0xcd, 0x75, 0xec, 0x26, 0x4e, 0xe6, 0x93, 0x01,
	0xe0, 0x73, 0x98, 0x37, 0x55, 0xa5, 0x98, 0x8e, 0x3d, 0x4b, 0x8f, 0x08, 0x13, 0x38, 0x2a, 0x79,
	0xb9, 0xeb, 0x9b, 0x6e, 0x57, 0x33, 0xba, 0x8f, 0xfd, 0xc4, 0xc9, 0x02, 0x02, 0x25, 0x2f, 0xaf,
	0x9a, 0xee, 0x82, 0xd1, 0x7d, 0xfa, 0x0e, 0x3c, 0x93, 0x8e, 0x21, 0xf8, 0x05, 0xc9, 0x3f, 0x7c,
	0x8a, 0x9e, 0x98, 0x32, 0x5f, 0xbf, 0xdf, 0x5e, 0x44, 0x0e, 0x02, 0xcc, 0x73, 0x52, 0x9c, 0x6f,
	0x8a, 0x68, 0x86, 0x47, 0x10, 0x5c, 0xae, 0xf3, 0xab, 0xb5, 0x41, 0x2e, 0x06, 0xe0, 0x6d, 0x37,
	0x1f, 0x49, 0xe4, 0xa5, 0x5f, 0x20, 0xb8, 0x14, 0xb4, 0x17, 0x5c, 0x69, 0x8c, 0xc0, 0xed, 0x24,
	0x1f, 0x47, 0x34, 0x25, 0x22, 0x78, 0x7b, 0x5a, 0x0f, 0x03, 0x86, 0xc4, 0xd6, 0xf8, 0x0a, 0x7c,
	0x5e, 0xd3, 0x6f, 0x2c, 0x76, 0x13, 0x37, 0x3b, 0x3c, 0x5b, 0x4c, 0x53, 0x9f, 0x1b, 0x96, 0x0c,
	0x62, 0xfa, 0xd3, 0x01, 0x6f, 0xab, 0x98, 0xc4, 0x13, 0x08, 0x3a, 0xc5, 0xa4, 0x8d, 0x19, 0x92,
	0x27, 0x8c, 0xa7, 0x10, 0x56, 0x9d, 0x10, 0xbb, 0x07, 0x3d, 0x02, 0x43, 0x7c, 0xfe, 0xef, 0x3e,
	0xf8, 0x02, 0xc2, 0xaa, 0x11, 0xa2, 0xf9, 0xc1, 0xa4, 0xb2, 0xeb, 0x5b, 0x92, 0x7b, 0x22, 0xfd,
	0x35, 0x83, 0xc3, 0xbb, 0x63, 0xb4, 0xa2, 0x37, 0xf3, 0xdc, 0x70, 0xad, 0xec, 0x8f, 0x2c, 0x89,
	0xad, 0x4d, 0x1f, 0x2d, 0xe9, 0xf5, 0xf7, 0x78, 0xf6, 0x4f, 0x9f, 0xc2, 0xb0, 0x64, 0x10, 0x8d,
	0x8b, 0x8a, 0xaf, 0x5d, 0xfd, 0xe8, 0x6f, 0x72, 0xc3, 0x92, 0x41, 0xc4, 0xd7, 0x30, 0xa7, 0x52,
	0x73, 0x65, 0x2e, 0x69, 0x6c, 0x4f, 0xef, 0x6d, 0x96, 0x26, 0xa3, 0x8c, 0x6f, 0x20, 0x68, 0xc7,
	0xb5, 0xc7, 0xbe, 0xb5, 0x2e, 0x27, 0xeb, 0xdd, 0x3d, 0xc8, 0x64, 0x79, 0xf4, 0x12, 0xe6, 0x76,
	0x57, 0x0f, 0x5e, 0x02, 0xbe, 0x04, 0xcf, 0xac, 0x35, 0x3e, 0xb0, 0x61, 0xc7, 0x53, 0x98, 0xb9,
	0x01, 0xb1, 0xd2, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x48, 0x9a, 0x2a, 0xfd, 0x02, 0x00,
	0x00,
}
