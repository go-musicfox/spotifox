// Code generated by capnpc-go. DO NOT EDIT.

package arc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type AttrDefTest capnp.Struct

// AttrDefTest_TypeID is the unique identifier for the type AttrDefTest.
const AttrDefTest_TypeID = 0xd8105e522f0e9c87

func NewAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func NewRootAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func ReadRootAttrDefTest(msg *capnp.Message) (AttrDefTest, error) {
	root, err := msg.Root()
	return AttrDefTest(root.Struct()), err
}

func (s AttrDefTest) String() string {
	str, _ := text.Marshal(0xd8105e522f0e9c87, capnp.Struct(s))
	return str
}

func (s AttrDefTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AttrDefTest) DecodeFromPtr(p capnp.Ptr) AttrDefTest {
	return AttrDefTest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AttrDefTest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AttrDefTest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AttrDefTest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AttrDefTest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AttrDefTest) TypeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AttrDefTest) HasTypeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AttrDefTest) TypeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AttrDefTest) SetTypeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AttrDefTest) TypeID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AttrDefTest) SetTypeID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AttrDefTest_List is a list of AttrDefTest.
type AttrDefTest_List = capnp.StructList[AttrDefTest]

// NewAttrDefTest creates a new list of AttrDefTest.
func NewAttrDefTest_List(s *capnp.Segment, sz int32) (AttrDefTest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AttrDefTest](l), err
}

// AttrDefTest_Future is a wrapper for a AttrDefTest promised by a client call.
type AttrDefTest_Future struct{ *capnp.Future }

func (f AttrDefTest_Future) Struct() (AttrDefTest, error) {
	p, err := f.Future.Ptr()
	return AttrDefTest(p.Struct()), err
}

type CellTxOp2 uint16

// CellTxOp2_TypeID is the unique identifier for the type CellTxOp2.
const CellTxOp2_TypeID = 0xe837dc667fe57e1f

// Values of CellTxOp2.
const (
	CellTxOp2_noOp        CellTxOp2 = 0
	CellTxOp2_insertChild CellTxOp2 = 1
	CellTxOp2_upsertChild CellTxOp2 = 2
	CellTxOp2_deleteChild CellTxOp2 = 3
	CellTxOp2_deleteCell  CellTxOp2 = 4
	CellTxOp2_checkpoint  CellTxOp2 = 5
)

// String returns the enum's constant name.
func (c CellTxOp2) String() string {
	switch c {
	case CellTxOp2_noOp:
		return "noOp"
	case CellTxOp2_insertChild:
		return "insertChild"
	case CellTxOp2_upsertChild:
		return "upsertChild"
	case CellTxOp2_deleteChild:
		return "deleteChild"
	case CellTxOp2_deleteCell:
		return "deleteCell"
	case CellTxOp2_checkpoint:
		return "checkpoint"

	default:
		return ""
	}
}

// CellTxOp2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func CellTxOp2FromString(c string) CellTxOp2 {
	switch c {
	case "noOp":
		return CellTxOp2_noOp
	case "insertChild":
		return CellTxOp2_insertChild
	case "upsertChild":
		return CellTxOp2_upsertChild
	case "deleteChild":
		return CellTxOp2_deleteChild
	case "deleteCell":
		return CellTxOp2_deleteCell
	case "checkpoint":
		return CellTxOp2_checkpoint

	default:
		return 0
	}
}

type CellTxOp2_List = capnp.EnumList[CellTxOp2]

func NewCellTxOp2_List(s *capnp.Segment, sz int32) (CellTxOp2_List, error) {
	return capnp.NewEnumList[CellTxOp2](s, sz)
}

type MultiTxCp capnp.Struct

// MultiTxCp_TypeID is the unique identifier for the type MultiTxCp.
const MultiTxCp_TypeID = 0x8afb8b2f70664e55

func NewMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func NewRootMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func ReadRootMultiTxCp(msg *capnp.Message) (MultiTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp(root.Struct()), err
}

func (s MultiTxCp) String() string {
	str, _ := text.Marshal(0x8afb8b2f70664e55, capnp.Struct(s))
	return str
}

func (s MultiTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp {
	return MultiTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp) ReqID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s MultiTxCp) SetReqID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s MultiTxCp) CellTxs() (MultiTxCp_CellTxCp_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_List(p.List()), err
}

func (s MultiTxCp) HasCellTxs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp) SetCellTxs(v MultiTxCp_CellTxCp_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCellTxs sets the cellTxs field to a newly
// allocated MultiTxCp_CellTxCp_List, preferring placement in s's segment.
func (s MultiTxCp) NewCellTxs(n int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := NewMultiTxCp_CellTxCp_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiTxCp_CellTxCp_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiTxCp_List is a list of MultiTxCp.
type MultiTxCp_List = capnp.StructList[MultiTxCp]

// NewMultiTxCp creates a new list of MultiTxCp.
func NewMultiTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp](l), err
}

// MultiTxCp_Future is a wrapper for a MultiTxCp promised by a client call.
type MultiTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_Future) Struct() (MultiTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp(p.Struct()), err
}

type MultiTxCp_CellTxCp capnp.Struct

// MultiTxCp_CellTxCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp.
const MultiTxCp_CellTxCp_TypeID = 0xf6f1fa73036d902f

func NewMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func NewRootMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func ReadRootMultiTxCp_CellTxCp(msg *capnp.Message) (MultiTxCp_CellTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp) String() string {
	str, _ := text.Marshal(0xf6f1fa73036d902f, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp {
	return MultiTxCp_CellTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp) Op() CellTxOp2 {
	return CellTxOp2(capnp.Struct(s).Uint16(0))
}

func (s MultiTxCp_CellTxCp) SetOp(v CellTxOp2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MultiTxCp_CellTxCp) CellSpec() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s MultiTxCp_CellTxCp) SetCellSpec(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s MultiTxCp_CellTxCp) CellID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp) SetCellID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp) Elems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

func (s MultiTxCp_CellTxCp) HasElems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp) SetElems(v MultiTxCp_CellTxCp_AttrElemCp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewElems sets the elems field to a newly
// allocated MultiTxCp_CellTxCp_AttrElemCp struct, preferring placement in s's segment.
func (s MultiTxCp_CellTxCp) NewElems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	ss, err := NewMultiTxCp_CellTxCp_AttrElemCp(capnp.Struct(s).Segment())
	if err != nil {
		return MultiTxCp_CellTxCp_AttrElemCp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiTxCp_CellTxCp_List is a list of MultiTxCp_CellTxCp.
type MultiTxCp_CellTxCp_List = capnp.StructList[MultiTxCp_CellTxCp]

// NewMultiTxCp_CellTxCp creates a new list of MultiTxCp_CellTxCp.
func NewMultiTxCp_CellTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp](l), err
}

// MultiTxCp_CellTxCp_Future is a wrapper for a MultiTxCp_CellTxCp promised by a client call.
type MultiTxCp_CellTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_Future) Struct() (MultiTxCp_CellTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp(p.Struct()), err
}
func (p MultiTxCp_CellTxCp_Future) Elems() MultiTxCp_CellTxCp_AttrElemCp_Future {
	return MultiTxCp_CellTxCp_AttrElemCp_Future{Future: p.Future.Field(0, nil)}
}

type MultiTxCp_CellTxCp_AttrElemCp capnp.Struct

// MultiTxCp_CellTxCp_AttrElemCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp_AttrElemCp.
const MultiTxCp_CellTxCp_AttrElemCp_TypeID = 0xd2411b0b08bea741

func NewMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func NewRootMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func ReadRootMultiTxCp_CellTxCp_AttrElemCp(msg *capnp.Message) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp_AttrElemCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) String() string {
	str, _ := text.Marshal(0xd2411b0b08bea741, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp_AttrElemCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp_AttrElemCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp_AttrElemCp {
	return MultiTxCp_CellTxCp_AttrElemCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) AttrID() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetAttrID(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SeriesIndex() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetSeriesIndex(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ValBuf() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) HasValBuf() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetValBuf(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// MultiTxCp_CellTxCp_AttrElemCp_List is a list of MultiTxCp_CellTxCp_AttrElemCp.
type MultiTxCp_CellTxCp_AttrElemCp_List = capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp]

// NewMultiTxCp_CellTxCp_AttrElemCp creates a new list of MultiTxCp_CellTxCp_AttrElemCp.
func NewMultiTxCp_CellTxCp_AttrElemCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_AttrElemCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp](l), err
}

// MultiTxCp_CellTxCp_AttrElemCp_Future is a wrapper for a MultiTxCp_CellTxCp_AttrElemCp promised by a client call.
type MultiTxCp_CellTxCp_AttrElemCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_AttrElemCp_Future) Struct() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

const schema_9aff325096b39f47 = "x\xdat\x93Ah\x13Y\x18\xc7\xff\xff\xf7\x92m\x96" +
	"m\x9a\x0cS\xd8e\x97%\x97e\xb1\xd26mT\xd4" +
	"^\xd24)\x9aR\xdb>\xad E\x844y!\x83" +
	"\x93t\x9a\x99h\xbc\xd8\xa3P/\x9e\x14D\xf0\xe8\xd1" +
	"\x83w\xef\x1eD\xf0d\xc1kQz\xf3\xe2\xa1\x1eF" +
	"^\xdadB\xb1\x97y\xf3\xbe\xf9\xe6\xfb~\xef\xff\xff" +
	"\xdeL\x9b\xf3\xb1\xd9\xe4\x07\x09\xa1&\xe3\xbf\x857W" +
	"\xea^\xf6\xf1\x8f](\x9b\x0c\xaf\xbc|\xf3t-\x17" +
	">G\x9c#\x80\xfd\x9e\x07\xf6\x1e\xff\x04\xec}\xde\x07" +
	"\xc3\xc2\xab\xb7\x89?\xfe)|\x84\xfa\x9f\"\xcc>i" +
	"J\xff\xf0\xdb\xf7\xa3\xe4sJ\xec\xd2v\x84\xf9O\x8b" +
	"\xd7`\xf8\xe8\xc5X\xf6\xfa\x9d\xf4\xa7_\x96\xa6<\xb4" +
	"\x93\xd2\xbc\xfd.M\xe9\xcc\xc3\xfd\x9d\xfa\xe7\x8b_a" +
	"\xd9\"\xca\x05mG\x1e\xd8\x9d^\xe2\xb6|\x06F]" +
	"\xd5\xbf\x14\x11\xfe\x11\xc3;\x99\xa3\xbd'{\xc4\xf2\x0b" +
	"\x8aa\xc5s\xfcl\xa5]\x15\xe61]\xadx-o" +
	"\xeeZ\xc7\x0d\x9c\xd4z\xb7\xe8\xa9\x18\x87\x0aZ\\\x0a" +
	"\x8b\xdau\xcd\x17\x00*!c@\x8c\x805\x91\x03\xd4" +
	"\x7f\x92jF\x90\x1c\xa7\x89M-\x00\xea\x8c\xa4*\x09" +
	"f\xdaz\xbb\\b\x1c\x82qp\xa7\xda+\xe2s\x0c" +
	"\\\x93d:j\x01\x9a\xe0\x80*~\x92\xca\xb4\x9e\xee" +
	"3L\x17\x82\xa0\xbd\xe8\xea\xa6\xc1Y#\xd5\xe8\x00h" +
	"q\x0eP\xf3\x92jY\xd0\xea\x13\x957\x01uUR" +
	"\xad\x0bR\x8cS\x00\x962\x89\xcb\x92\xea\x96`\xbe\x12" +
	"\x04\xedr\x89\x09\x08&\xc0\xd0\xd7mG\xfb\xe5\x16F" +
	"j\xba\xdb\x87\xcf\xdf\xab\xb8\x0b\x9d:\x93\x10L\x0e\xa1" +
	"\x0e\x0bh\xb8Jy]_\xd7~`\xb8\x86\x84Z:" +
	"\x16\xe5|$\xd4\xacA\x98\x94T\x97\x04\xc3\xe0\x81\xa7" +
	"W*M\x0d\x80\xa3\x10\x1c\x05\xf3&V.1\x06\xc1" +
	"\xd8)\x1d{\x92\xa4\xba\xab^\xce\xf4\xfb\xabw\xb4\xc2" +
	"Y#\xa7uy\x13\xa0\xb0.\x98EZ\xb3f\x89Y" +
	"S\x1b\x00\xe3\xd6\xc4\x06\x90jm\xadz\xa1\xd3\xf2u" +
	";(60\xe2\xb8\xb5\xb0\xe3\x0d\xefj\xda\xd5\x81>" +
	"\xb1\xd3\x90\xae\x1bV\x1b\xbaz\xd7\xdbr [\xc1\x00" +
	"L\x9e\xe6Z\xc6\x1d\x0c\xd5\xe0\xa6X\xdc\x08\xfb>B" +
	"\x16=\x95\x1e\x88U\xf9\x1bP\xb7%Uc\xc8Dm" +
	"\x14\xacI*O\xd0\x12<r\xb1i$lH\xaa@" +
	"\x90r\x9c\x12\xb0\xb6\xcdL\xba\x92\xaa+(\xb7<\xa6" +
	"\xa2+\x042\x05\x86f\x0cox\xbaj\xb4>\xf6<" +
	"ob\xd1\xa4f\xb4\xab\x9b>\xd3\x11.\xc84\xf83" +
	"\x00\x00\xff\xff9\xb1\x07\xd0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9aff325096b39f47,
		Nodes: []uint64{
			0x8afb8b2f70664e55,
			0xd2411b0b08bea741,
			0xd8105e522f0e9c87,
			0xe837dc667fe57e1f,
			0xf6f1fa73036d902f,
		},
		Compressed: true,
	})
}
