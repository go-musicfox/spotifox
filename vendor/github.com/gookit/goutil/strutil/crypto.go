package strutil

import (
	"crypto/hmac"
	"crypto/md5"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
)

// Md5 Generate a 32-bit md5 string
func Md5(src any) string {
	return hex.EncodeToString(Md5Bytes(src))
}

// MD5 Generate a 32-bit md5 string
func MD5(src any) string { return Md5(src) }

// GenMd5 Generate a 32-bit md5 string
func GenMd5(src any) string { return Md5(src) }

// Md5Bytes Generate a 32-bit md5 bytes
func Md5Bytes(src any) []byte {
	h := md5.New()
	if s, ok := src.(string); ok {
		h.Write([]byte(s))
	} else {
		h.Write([]byte(fmt.Sprint(src)))
	}
	return h.Sum(nil)
}

// HashPasswd for quick hash an input password string
func HashPasswd(pwd, key string) string {
	hm := hmac.New(sha256.New, []byte(key))
	hm.Write([]byte(pwd))

	return hex.EncodeToString(hm.Sum(nil))
}

// VerifyPasswd for quick verify input password is valid
//
// - pwdMAC from db or config, generated by EncryptPasswd()
func VerifyPasswd(pwdMAC, pwd, key string) bool {
	decBts, err := hex.DecodeString(pwdMAC)
	if err != nil {
		return false
	}

	hm := hmac.New(sha256.New, []byte(key))
	hm.Write([]byte(pwd))

	return hmac.Equal(decBts, hm.Sum(nil))
}
